package com.github.powerlibraries.array;

import java.util.Arrays;
import java.util.Collection;
import java.util.RandomAccess;
{% if t.primitive %}{% else %}
import java.util.Comparator;
{% endif %}
import com.github.powerlibraries.primitive.collections.{{t.label}}Collection;
import com.github.powerlibraries.primitive.collections.{{t.label}}List;

public interface {{t.label}}Array{{t.generic}} extends {{t.label}}List{{t.generic}}, Array<{{t.boxed}}>, RandomAccess {

	@SuppressWarnings("rawtypes")
	final static {{t.label}}Array EMPTY = new Default{{t.label}}Array(new {{t.arrayType}}[0]);
	
	@SuppressWarnings("unchecked")
	static {{t.generic}} {{t.label}}Array{{t.generic}} empty() {
		return EMPTY;
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} ofSize(int size) {
		if(size == 0)
			return empty();
		return new Default{{t.label}}Array{{t.generic}}(new {{t.arrayType}}[size]);
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy(Collection<? extends {{t.boxed}}> c) {
		{{t.label}}Array{{t.generic}} result = ofSize(c.size());
		int i=0;
		for({{t.boxed}} v:c)
			result.set{{t.label}}(i++, v);
		return result;
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy({{t.label}}Array{{t.extendedGeneric}} arr) {
		return new Default{{t.label}}Array{{t.generic}}(arr.to{{t.label}}Array());
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy({{t.type}}[] arr) {
		return new Default{{t.label}}Array{{t.generic}}(Arrays.copyOf(arr, arr.length));
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy({{t.type}}[] arr, int offset, int length) {
		return new Default{{t.label}}Array{{t.generic}}(Arrays.copyOfRange(arr, offset, offset + length));
	}
	{% if t.primitive %}
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy({{t.boxed}}[] arr) {
		return copy(arr, 0, arr.length);
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} copy({{t.boxed}}[] arr, int offset, int length) {
		{{t.type}}[] copy = new {{t.type}}[length];
		for(int i=0; i < length; i++) {
			copy[i] = arr[offset + i];
		}
		return new Default{{t.label}}Array{{t.generic}}(copy);
	}
	{% endif %}
	static {{t.generic}} {{t.label}}Array{{t.generic}} wrap({{t.arrayType}}... arr) {
		return new Default{{t.label}}Array{{t.generic}}(arr);
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} wrap({{t.label}}Array{{t.extendedGeneric}} arr) {
		return new Default{{t.label}}Array{{t.generic}}(arr.getInternalArray(), arr.getInternalOffset(), arr.size());
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} wrap({{t.arrayType}}[] arr, int offset, int length) {
		return new Default{{t.label}}Array{{t.generic}}(arr, offset, length);
	}

	static {{t.generic}} {{t.label}}Array{{t.generic}} wrap({{t.label}}Array{{t.extendedGeneric}} arr, int offset, int lengt) {
		//TODO all of those construcor should check for correct offset and length values
		return new Default{{t.label}}Array{{t.generic}}(arr.getInternalArray(), arr.getInternalOffset(), arr.size());
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} concat({{t.label}}Array{{t.extendedGeneric}} arr, {{t.type}} element) {
		{{t.arrayType}}[] result = new {{t.arrayType}}[arr.size() + 1];
		arr.copyTo(result);
		result[arr.size() + 1] = element;
		return wrap(result);
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} concat({{t.type}} element, {{t.label}}Array{{t.extendedGeneric}} arr) {
		{{t.arrayType}}[] result = new {{t.arrayType}}[arr.size() + 1];
		arr.copyTo(result, 1);
		result[0] = element;
		return wrap(result);
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} concat({{t.label}}Array{{t.extendedGeneric}} arr, Collection<? extends {{t.boxed}}> elements) {
		{{t.label}}Array{{t.generic}} result = {{t.label}}Array.ofSize(arr.size() + elements.size());
		for(int i=0; i<arr.size(); i++) {
			result.set{{t.label}}(i, arr.get{{t.label}}(i));
		}
		int index = arr.size();
		for({{t.type}} value : elements) {
			result.set{{t.label}}(index++, value);
		}
		return result;
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} concat(Collection<? extends {{t.boxed}}> elements, {{t.label}}Array{{t.extendedGeneric}} arr) {
		{{t.label}}Array{{t.generic}} result = {{t.label}}Array.ofSize(arr.size() + elements.size());
		int index = 0;
		for({{t.type}} value : elements) {
			result.set{{t.label}}(index++, value);
		}
		for(int i=0; i<arr.size(); i++) {
			result.set{{t.label}}(i + index, arr.get{{t.label}}(i));
		}
		return result;
	}
	
	static {{t.generic}} {{t.label}}Array{{t.generic}} concat({{t.label}}Array{{t.extendedGeneric}} arr, {{t.label}}Array{{t.extendedGeneric}} arr2) {
		{{t.label}}Array{{t.generic}} result = {{t.label}}Array.ofSize(arr.size() + arr2.size());
		for(int i=0; i<arr.size(); i++) {
			result.set{{t.label}}(i, arr.get{{t.label}}(i));
		}
		for(int i=0; i<arr2.size(); i++) {
			result.set{{t.label}}(i + arr2.size(), arr2.get{{t.label}}(i));
		}
		return result;
	}



	//Interface methods
	
	@Override
	default boolean add{{t.label}}({{t.type}} e) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}
	
	@Override
	default void add{{t.label}}(int index, {{t.type}} element) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}
	
	@Override
	default boolean addAll{{t.label}}s({{t.label}}Collection c) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}
	
	@Override
	default boolean addAll(Collection<? extends {{t.boxed}}> c) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

	@Override
	default boolean addAll(int index, Collection<? extends {{t.boxed}}> c) throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}
	
	@Override
	default {{t.label}}Array{{t.generic}} subList(int fromIndex, int toIndex) {
		return {{t.label}}Array.wrap(this, fromIndex, toIndex-fromIndex);
	}
	
	default {{t.label}}Array{{t.generic}} subArray(int offset, int length) {
		return {{t.label}}Array.wrap(this, offset, length);
	}
	
	default void copyTo({{t.arrayType}}[] other) {
		this.copyTo(other, 0);
	}
	
	default void copyTo({{t.arrayType}}[] other, int offset) {
		System.arraycopy(
			getInternalArray(),
			getInternalOffset(),
			other,
			offset,
			Math.min(size(), other.length-offset) 
		);
	}
	
	{% if t.numeric %}
	int binarySearch({{t.type}} key);
	{% elseif not (t.primitive) %}
	int binarySearch({{t.type}} key, Comparator<{{t.boxed}}> comp);
	{% endif %}
	void fill({{t.type}} val);
	
	{{t.arrayType}}[] getInternalArray();
	
	int getInternalOffset();
}